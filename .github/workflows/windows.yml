name: windows

on:
  workflow_dispatch:

jobs:
  windows_job:
    runs-on: windows-latest
    timeout-minutes: 6

    steps:
    - name: Restore backup
      if: always()
      uses: actions/download-artifact@v4
      with:
        name: backup-data
        path: C:\Users\runneradmin\backup_restore_tmp

    - name: Extract backup to original locations
      if: always()
      shell: pwsh
      run: |
        $zipPath = "C:\Users\runneradmin\backup_restore_tmp\backup.zip"
        if (Test-Path $zipPath) {
          Expand-Archive -Path $zipPath -DestinationPath C:\Users\runneradmin -Force
        }

    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip

    - name: Auth ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Start ngrok background
      shell: pwsh
      run: Start-Process -NoNewWindow -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389"

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Datnguyentv.com" -Force)

    - name: Sleep 3 minutes
      shell: pwsh
      run: Start-Sleep -Seconds 5

    - name: Trigger reruner workflow
      shell: pwsh
      run: |
        $token = "${{ secrets.MY_PAT_TOKEN }}"
        $repo = "${{ github.repository }}"
        $body = '{"ref":"main"}'
        Invoke-RestMethod -Method POST -Uri "https://api.github.com/repos/$repo/actions/workflows/reruner.yml/dispatches" `
          -Headers @{ Authorization = "token $token" } `
          -Body $body -ContentType "application/json"

    - name: Backup Desktop, Documents, Downloads
      if: always()
      shell: pwsh
      run: |
        Compress-Archive -Path `
          "C:\Users\runneradmin\Desktop", `
          "C:\Users\runneradmin\Documents", `
          "C:\Users\runneradmin\Downloads" `
          -DestinationPath backup.zip

    - name: Upload backup
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backup-data
        path: backup.zip
